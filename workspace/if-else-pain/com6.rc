use std::collections::HashMap;
use std::env;
use std::fs;
use std::process::Command;

#[derive(Debug, Clone)]
enum Value {
    Int(i64),
    Str(String),
}

#[derive(Debug, Clone)]
enum Statement {
    If {
        condition: String,
        then_branch: Vec<Statement>,
        else_branch: Vec<Statement>,
    },
    Print(String),
    Assign(String, String),
}

struct Compiler {
    variables: HashMap<String, Value>,
    data_section: Vec<String>,
    text_section: Vec<String>,
    label_counter: usize,
}

impl Compiler {
    fn new() -> Self {
        Self {
            variables: HashMap::new(),
            data_section: vec![".data".to_string()],
            text_section: vec![
                "    .text".to_string(),
                "    .global _start".to_string(),
                "_start:".to_string(),
            ],
            label_counter: 0,
        }
    }

    fn new_label(&mut self) -> String {
        let label = format!("L{}", self.label_counter);
        self.label_counter += 1;
        label
    }

    fn add_string(&mut self, s: &str) -> String {
        let label = format!("str{}", self.data_section.len() / 3);
        let escaped = s.replace('\\', "\\\\").replace('"', "\\\"");
        self.data_section.push(format!("{}:", label));
        self.data_section.push(format!("    .ascii \"{}\\n\"", escaped));
        self.data_section.push(format!("{}_len = . - {}", label, label));
        label
    }

    fn eval_expr(&self, expr: &str) -> Value {
        if let Ok(n) = expr.parse::<i64>() {
            return Value::Int(n);
        }
        if expr.starts_with('"') && expr.ends_with('"') {
            return Value::Str(expr[1..expr.len()-1].to_string());
        }
        self.variables.get(expr).cloned()
            .unwrap_or_else(|| panic!("Unknown variable: {}", expr))
    }

    fn compile(&mut self, statements: &[Statement]) {
        for stmt in statements {
            match stmt {
                Statement::If { condition, then_branch, else_branch } => {
                    let end_label = self.new_label();
                    let else_label = self.new_label();

                    // Evaluate condition
                    let cond = self.eval_expr(condition);
                    let val = match cond {
                        Value::Int(n) => n != 0,
                        Value::Str(s) => !s.is_empty(),
                    };

                    // Branch based on condition
                    self.text_section.push(format!("    // if {}", condition));
                    if !val {
                        self.text_section.push(format!("    b {}", else_label));
                    }

                    // Compile then branch
                    self.compile(then_branch);
                    self.text_section.push(format!("    b {}", end_label));

                    // Compile else branch
                    self.text_section.push(format!("{}:", else_label));
                    self.compile(else_branch);

                    self.text_section.push(format!("{}:", end_label));
                }

                Statement::Print(s) => {
                    let label = self.add_string(s);
                    self.text_section.extend([
                        format!("    // print {}", s),
                        "    mov x0, #1".to_string(),
                        format!("    adr x1, {}", label),
                        format!("    mov x2, {}_len", label),
                        "    mov x8, #64".to_string(),
                        "    svc #0".to_string(),
                    ]);
                }

                Statement::Assign(name, expr) => {
                    let val = self.eval_expr(expr);
                    self.variables.insert(name.clone(), val);
                }
            }
        }
    }

    fn save_asm(&self, path: &str) {
        let mut asm = self.data_section.clone();
        asm.push("".to_string());
        asm.extend(self.text_section.clone());
        asm.extend([
            "    // Exit".to_string(),
            "    mov x0, #0".to_string(),
            "    mov x8, #93".to_string(),
            "    svc #0".to_string(),
        ]);
        fs::write(path, asm.join("\n")).unwrap();
    }
}

fn parse(input: &str) -> Vec<Statement> {
    let mut stmts = Vec::new();
    let lines: Vec<_> = input.lines()
        .map(|l| l.trim())
        .filter(|l| !l.is_empty() && !l.starts_with('#'))
        .collect();

    let mut i = 0;
    while i < lines.len() {
        let line = lines[i];
        if line.starts_with("if ") && line.ends_with(':') {
            let cond = line[3..line.len()-1].trim().to_string();
            i += 1;

            let mut then_branch = Vec::new();
            while i < lines.len() && lines[i].starts_with("    ") {
                then_branch.push(parse_statement(lines[i].trim()));
                i += 1;
            }

            let mut else_branch = Vec::new();
            if i < lines.len() && lines[i] == "else:" {
                i += 1;
                while i < lines.len() && lines[i].starts_with("    ") {
                    else_branch.push(parse_statement(lines[i].trim()));
                    i += 1;
                }
            }

            stmts.push(Statement::If {
                condition: cond,
                then_branch,
                else_branch,
            });
        } else {
            stmts.push(parse_statement(line));
            i += 1;
        }
    }
    stmts
}

fn parse_statement(line: &str) -> Statement {
    if line.starts_with("print(") && line.ends_with(')') {
        Statement::Print(line[6..line.len()-1].trim().to_string())
    } else if let Some(eq) = line.find('=') {
        Statement::Assign(
            line[..eq].trim().to_string(),
            line[eq+1..].trim().to_string(),
        )
    } else {
        panic!("Unsupported statement: {}", line)
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <input.py>", args[0]);
        return;
    }

    let input = fs::read_to_string(&args[1]).unwrap();
    let stmts = parse(&input);
    let mut compiler = Compiler::new();
    compiler.compile(&stmts);
    compiler.save_asm("out.s");

    Command::new("as")
        .args(["-o", "out.o", "out.s"])
        .status()
        .unwrap();

    Command::new("ld")
        .args(["-o", "a.out", "out.o"])
        .status()
        .unwrap();

    println!("âœ… Compiled successfully");
}
