use std::collections::HashMap;
use std::env;
use std::fs;
use std::process::Command;

#[derive(Debug, Clone)]
enum Value {
    Int(i64),
    Str(String),
    Bool(bool),
}

#[derive(Debug, Clone)]
enum Statement {
    If {
        condition: String,
        then_branch: Vec<Statement>,
        elif_branches: Vec<(String, Vec<Statement>)>,
        else_branch: Option<Vec<Statement>>,
    },
    Print(Vec<String>),
    Assign(String, String),
    FunctionCall(String),
}

struct Compiler {
    variables: HashMap<String, Value>,
    functions: HashMap<String, Vec<Statement>>,
    data_section: Vec<String>,
    text_section: Vec<String>,
    label_counter: usize,
}

impl Compiler {
    fn new() -> Self {
        Self {
            variables: HashMap::new(),
            functions: HashMap::new(),
            data_section: vec![".data".to_string()],
            text_section: vec![
                "    .text".to_string(),
                "    .global _start".to_string(),
                "_start:".to_string(),
            ],
            label_counter: 0,
        }
    }

    fn new_label(&mut self, prefix: &str) -> String {
        let label = format!("{}{}", prefix, self.label_counter);
        self.label_counter += 1;
        label
    }

    fn add_data(&mut self, val: &str) -> String {
        let label = format!("str{}", self.data_section.len());
        let escaped = val.replace('\n', "\\n").replace('"', "\\\"");
        
        self.data_section.push(format!("{}:", label));
        self.data_section.push(format!("    .ascii \"{}\"", escaped));
        self.data_section.push(format!("{}_len = . - {}", label, label));
        
        label
    }

    fn eval_condition(&self, expr: &str) -> bool {
        let parts: Vec<&str> = expr.split_whitespace().collect();
        if parts.len() != 3 {
            panic!("Invalid condition: {}", expr);
        }

        let left = self.eval_expr(parts[0]);
        let right = self.eval_expr(parts[2]);
        let op = parts[1];

        match (left, op, right) {
            (Value::Int(a), ">", Value::Int(b)) => a > b,
            (Value::Int(a), "<", Value::Int(b)) => a < b,
            (Value::Int(a), "==", Value::Int(b)) => a == b,
            _ => panic!("Unsupported comparison: {} {} {}", parts[0], op, parts[2]),
        }
    }

    fn eval_expr(&self, expr: &str) -> Value {
        if let Ok(num) = expr.parse::<i64>() {
            return Value::Int(num);
        }

        if let Some(val) = self.variables.get(expr) {
            return val.clone();
        }

        panic!("Unknown variable or invalid expression: {}", expr);
    }

    fn compile(&mut self, statements: &[Statement]) {
        for stmt in statements {
            match stmt {
                Statement::If {
                    condition,
                    then_branch,
                    elif_branches,
                    else_branch,
                } => {
                    let end_label = self.new_label("if_end");
                    
                    // Compile if
                    if self.eval_condition(condition) {
                        self.compile(then_branch);
                        self.text_section.push(format!("    b {}", end_label));
                    }

                    // Compile elifs
                    for (cond, branch) in elif_branches {
                        if self.eval_condition(cond) {
                            self.compile(branch);
                            self.text_section.push(format!("    b {}", end_label));
                        }
                    }

                    // Compile else
                    if let Some(branch) = else_branch {
                        self.compile(branch);
                    }

                    self.text_section.push(format!("{}:", end_label));
                }

                Statement::Print(args) => {
                    let s = args.join(" ");
                    let label = self.add_data(&s);
                    self.text_section.extend([
                        format!("    // print {}", s),
                        "    mov x0, #1".to_string(),
                        format!("    adr x1, {}", label),
                        format!("    mov x2, {}_len", label),
                        "    mov x8, #64".to_string(),
                        "    svc #0".to_string(),
                    ]);
                }

                Statement::Assign(name, expr) => {
                    let val = self.eval_expr(expr);
                    self.variables.insert(name.clone(), val);
                }

                Statement::FunctionCall(name) => {
                    if let Some(body) = self.functions.get(name) {
                        let mut temp_compiler = Compiler {
                            variables: self.variables.clone(),
                            functions: self.functions.clone(),
                            data_section: self.data_section.clone(),
                            text_section: self.text_section.clone(),
                            label_counter: self.label_counter,
                        };
                        temp_compiler.compile(body);
                        *self = temp_compiler;
                    }
                }
            }
        }
    }

    fn save_asm(&self, filename: &str) {
        let mut asm = self.data_section.clone();
        asm.push("".to_string());
        asm.extend(self.text_section.clone());
        asm.extend([
            "    // Exit".to_string(),
            "    mov x0, #0".to_string(),
            "    mov x8, #93".to_string(),
            "    svc #0".to_string(),
        ]);

        fs::write(filename, asm.join("\n")).unwrap();
    }
}

fn parse(input: &str) -> Vec<Statement> {
    let mut statements = Vec::new();
    let lines: Vec<&str> = input.lines().map(|l| l.trim()).collect();
    let mut i = 0;

    while i < lines.len() {
        let line = lines[i];
        if line.is_empty() || line.starts_with('#') {
            i += 1;
            continue;
        }

        if line.starts_with("if ") && line.ends_with(':') {
            let condition = line[3..line.len()-1].trim().to_string();
            i += 1;

            let mut then_branch = Vec::new();
            while i < lines.len() && (lines[i].starts_with("    ") || lines[i].starts_with('\t')) {
                then_branch.push(parse_statement(lines[i].trim()));
                i += 1;
            }

            let mut elif_branches = Vec::new();
            while i < lines.len() {
                let trimmed = lines[i].trim();
                if !trimmed.starts_with("elif") {
                    break;
                }
                if !trimmed.ends_with(':') {
                    panic!("Expected colon after elif condition: {}", trimmed);
                }
                
                let cond = trimmed[4..trimmed.len()-1].trim().to_string();
                i += 1;
                let mut branch = Vec::new();
                while i < lines.len() && (lines[i].starts_with("    ") || lines[i].starts_with('\t')) {
                    branch.push(parse_statement(lines[i].trim()));
                    i += 1;
                }
                elif_branches.push((cond, branch));
            }

            let mut else_branch = None;
            if i < lines.len() {
                let normalized: String = lines[i].split_whitespace().collect();
                if normalized == "else:" {
                    i += 1;
                    let mut branch = Vec::new();
                    while i < lines.len() && (lines[i].starts_with("    ") || lines[i].starts_with('\t')) {
                        branch.push(parse_statement(lines[i].trim()));
                        i += 1;
                    }
                    else_branch = Some(branch);
                }
            }

            statements.push(Statement::If {
                condition,
                then_branch,
                elif_branches,
                else_branch,
            });
        } else {
            let normalized: String = line.split_whitespace().collect();
            if normalized == "else:" {
                panic!("Standalone else: is not allowed. Must be part of an if block.");
            }
            statements.push(parse_statement(line));
            i += 1;
        }
    }

    statements
}

fn parse_statement(line: &str) -> Statement {
    if line.starts_with("print(") && line.ends_with(')') {
        let args = line[6..line.len()-1]
            .split(',')
            .map(|s| s.trim().trim_matches('"').to_string())
            .collect();
        Statement::Print(args)
    } else if let Some(eq_pos) = line.find('=') {
        let name = line[..eq_pos].trim().to_string();
        let expr = line[eq_pos+1..].trim().to_string();
        Statement::Assign(name, expr)
    } else if line.ends_with("()") {
        Statement::FunctionCall(line[..line.len()-2].to_string())
    } else {
        panic!("Unsupported statement: {}", line);
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <input.py> [-o output]", args[0]);
        return;
    }

    let input = fs::read_to_string(&args[1]).expect("Failed to read input file");
    let output = if args.len() >= 4 && args[2] == "-o" {
        &args[3]
    } else {
        "a.out"
    };

    let statements = parse(&input);
    let mut compiler = Compiler::new();
    compiler.compile(&statements);
    compiler.save_asm("out.s");

    Command::new("as")
        .args(["-o", "out.o", "out.s"])
        .status()
        .expect("Failed to assemble");

    Command::new("ld")
        .args(["-o", output, "out.o"])
        .status()
        .expect("Failed to link");

    println!("âœ… Compiled to {}", output);
}
