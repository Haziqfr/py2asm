#!/usr/bin/env python3
import sys
import subprocess
import re

if len(sys.argv) < 2:
    print("Usage: compiler <input.py> [-o <output>]")
    sys.exit(1)

input_file = sys.argv[1]
output_file = "a.out"
if "-o" in sys.argv:
    o_index = sys.argv.index("-o")
    if o_index + 1 < len(sys.argv):
        output_file = sys.argv[o_index + 1]
    else:
        print("❌ Output file not specified after -o")
        sys.exit(1)

with open(input_file) as f:
    raw_lines = f.readlines()

lines = [line.rstrip('\n') for line in raw_lines]

data_section = []
text_section = [
    "    .text",
    "    .global _start",
    "_start:"
]

variables = {}
functions = {}
data_count = 0

def add_data(val, add_newline=True):
    global data_count, data_section
    label = f"str{data_count}"
    real_str = val.encode('utf-8').decode('unicode_escape')
    if add_newline:
        real_str += "\n"
    bytes_list = [str(b) for b in real_str.encode('utf-8')]
    data_section.append(f"{label}:")
    for i in range(0, len(bytes_list), 10):
        chunk = bytes_list[i:i+10]
        data_section.append("    .byte " + ", ".join(chunk))
    data_section.append(f"{label}_len = . - {label}")
    data_count += 1
    return label

def emit_print(label):
    return [
        f"    mov x0, #1",
        f"    adr x1, {label}",
        f"    mov x2, {label}_len",
        f"    mov x8, #64",
        f"    svc #0"
    ]

def eval_expr(expr, vars_dict):
    expr = expr.strip()

    chr_match = re.fullmatch(r'chr\\s*\\(\\s*(.+)\\s*\\)', expr)
    if chr_match:
        inner = chr_match.group(1)
        val = eval_expr(inner, vars_dict)
        return chr(int(val)) if val is not None else None

    ord_match = re.fullmatch(r'ord\\s*\\(\\s*(.+)\\s*\\)', expr)
    if ord_match:
        inner = ord_match.group(1)
        val = eval_expr(inner, vars_dict)
        return ord(val) if val and isinstance(val, str) and len(val) == 1 else None

    def repl_var(m):
        var = m.group(0)
        if var in vars_dict:
            v = vars_dict[var]
            return f'"{v}"' if isinstance(v, str) else str(v)
        return var

    expr = re.sub(r'\\b[a-zA-Z_][a-zA-Z0-9_]*\\b', repl_var, expr)
    try:
        return eval(expr, {"__builtins__": {}})
    except:
        return None

def extract_block(start_index):
    body = []
    i = start_index
    while i < len(lines):
        line = lines[i]
        if line.startswith("    "):
            body.append(line[4:])
        elif line.strip() == "":
            pass
        else:
            break
        i += 1
    return body, i

def compile_lines(lines_to_compile, local_vars):
    global text_section, variables
    i = 0
    while i < len(lines_to_compile):
        line = lines_to_compile[i].strip()
        if not line or line.startswith("#"):
            i += 1
            continue

        if "=" in line and not line.startswith("print") and not line.startswith("def") and not line.endswith(")"):
            name, expr = [x.strip() for x in line.split("=", 1)]
            val = expr[1:-1] if (expr.startswith('"') and expr.endswith('"')) or (expr.startswith("'") and expr.endswith("'")) else eval_expr(expr, local_vars)
            if val is None:
                print(f"❌ Invalid expression for {name}: {expr}")
                sys.exit(1)
            local_vars[name] = val

        elif line.startswith("print(") and line.endswith(")"):
            args = line[6:-1].split(",")
            args = [a.strip() for a in args]
            combined = ""
            for a in args:
                val = a[1:-1] if (a.startswith('"') and a.endswith('"')) or (a.startswith("'") and a.endswith("'")) else eval_expr(a, local_vars)
                if val is None:
                    print(f"❌ Invalid print arg: {a}")
                    sys.exit(1)
                if combined != "":
                    combined += " "
                combined += str(val)
            label = add_data(combined, True)
            text_section += emit_print(label)

        elif re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*\\(\\)$', line):
            fname = line[:-2]
            if fname not in functions:
                print(f"❌ Undefined function: {fname}")
                sys.exit(1)
            compile_lines(functions[fname], {**variables, **local_vars})

        elif line.startswith("if ") and line.endswith(":"):
            condition = line[3:-1].strip()
            true_block, next_i = extract_block(i+1)
            condition_val = eval_expr(condition, local_vars)

            matched = False
            if condition_val:
                compile_lines(true_block, dict(local_vars))
                matched = True
            i = next_i

            while i < len(lines_to_compile):
                next_line = lines_to_compile[i].strip()
                if next_line.startswith("elif ") and next_line.endswith(":"):
                    condition = next_line[5:-1].strip()
                    block, next_i = extract_block(i+1)
                    if not matched and eval_expr(condition, local_vars):
                        compile_lines(block, dict(local_vars))
                        matched = True
                    i = next_i
                elif next_line == "else:":
                    block, next_i = extract_block(i+1)
                    if not matched:
                        compile_lines(block, dict(local_vars))
                    i = next_i
                    break
                else:
                    break

        else:
            print(f"❌ Unsupported: {line}")
            sys.exit(1)
        i += 1

i = 0
while i < len(lines):
    line = lines[i]
    if line.strip().startswith("def ") and line.strip().endswith("():"):
        fname = line.strip()[4:-3].strip()
        body, next_i = extract_block(i+1)
        functions[fname] = body
        i = next_i
    else:
        compile_lines([line], variables)
        i += 1

text_section += [
    "    mov x0, #0",
    "    mov x8, #93",
    "    svc #0"
]

asm = [".data"] + data_section + [""] + text_section
with open("out.s", "w") as f:
    f.write("\n".join(asm) + "\n")

subprocess.run(["as", "-o", "out.o", "out.s"], check=True)
subprocess.run(["ld", "out.o", "-o", output_file], check=True)
print(f"✅ Compiled to {output_file}")
