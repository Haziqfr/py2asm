use std::collections::HashMap;
use std::env;
use std::fs;
use std::process::Command;

#[derive(Debug, Clone)]
enum Value {
    Int(i64),
    Str(String),
    Char(char),
}

struct Compiler {
    variables: HashMap<String, Value>,
    functions: HashMap<String, Vec<String>>,
    data_section: Vec<String>,
    text_section: Vec<String>,
    data_count: usize,
}

impl Compiler {
    fn new() -> Self {
        Self {
            variables: HashMap::new(),
            functions: HashMap::new(),
            data_section: vec![".data".to_string()],
            text_section: vec![
                "    .text",
                "    .global _start",
                "_start:",
            ].iter().map(|s| s.to_string()).collect(),
            data_count: 0,
        }
    }

    fn add_data(&mut self, val: &str, add_newline: bool) -> String {
        let label = format!("str{}", self.data_count);
        let mut processed = String::new();
        let mut chars = val.chars().peekable();

        while let Some(c) = chars.next() {
            if c == '\\' {
                match chars.next() {
                    Some('n') => processed.push('\n'),
                    Some('t') => processed.push('\t'),
                    Some('\\') => processed.push('\\'),
                    Some('"') => processed.push('"'),
                    Some(c) => processed.push(c),
                    None => panic!("Invalid escape sequence"),
                }
            } else {
                processed.push(c);
            }
        }

        if add_newline {
            processed.push('\n');
        }

        self.data_section.push(format!("{}:", label));
        self.data_section.push(format!("    .ascii \"{}\"", processed));
        self.data_section.push(format!("{}_len = . - {}", label, label));
        self.data_count += 1;
        label
    }

    fn emit_print(&mut self, label: &str) {
        self.text_section.extend(vec![
            format!("    mov x0, #1"),
            format!("    adr x1, {}", label),
            format!("    mov x2, {}_len", label),
            "    mov x8, #64".to_string(),
            "    svc #0".to_string(),
        ]);
    }

    fn eval_expr(&self, expr: &str, local_vars: &HashMap<String, Value>) -> Option<Value> {
        let expr = expr.trim();

        // Handle chr()
        if let Some(inner) = expr.strip_prefix("chr(").and_then(|s| s.strip_suffix(")")) {
            if let Some(Value::Int(n)) = self.eval_expr(inner, local_vars) {
                return char::from_u32(n as u32).map(Value::Char);
            }
        }

        // Handle ord()
        if let Some(inner) = expr.strip_prefix("ord(").and_then(|s| s.strip_suffix(")")) {
            if let Some(val) = self.eval_expr(inner, local_vars) {
                match val {
                    Value::Char(c) => return Some(Value::Int(c as i64)),
                    Value::Str(s) if s.len() == 1 => return Some(Value::Int(s.chars().next()? as i64)),
                    _ => (),
                }
            }
        }

        if let Ok(n) = expr.parse::<i64>() {
            return Some(Value::Int(n));
        }

        if let Some(s) = expr.strip_prefix('"').and_then(|s| s.strip_suffix('"')) {
            return Some(Value::Str(s.to_string()));
        }

        if let Some(c) = expr.strip_prefix('\'').and_then(|s| s.strip_suffix('\'')) {
            if c.len() == 1 {
                return Some(Value::Char(c.chars().next()?));
            }
        }

        local_vars.get(expr).or_else(|| self.variables.get(expr)).cloned()
    }

    fn compile_lines(&mut self, lines: &[String]) {
        let mut i = 0;
        while i < lines.len() {
            let line = lines[i].trim();
            if line.is_empty() || line.starts_with('#') {
                i += 1;
                continue;
            }

            // Handle variable assignment
            if let Some((name, expr)) = line.split_once('=') {
                let name = name.trim();
                let expr = expr.trim();
                if let Some(val) = self.eval_expr(expr, &HashMap::new()) {
                    self.variables.insert(name.to_string(), val);
                }
                i += 1;
                continue;
            }

            // Handle print
            if let Some(args) = line.strip_prefix("print(").and_then(|s| s.strip_suffix(")")) {
                let label = self.add_data(args, true);
                self.emit_print(&label);
                i += 1;
                continue;
            }

            // Handle function calls
            if line.ends_with("()") {
                let func_name = line.trim_end_matches("()");
                if let Some(body) = self.functions.get(func_name).cloned() {
                    let mut temp_compiler = Compiler {
                        variables: self.variables.clone(),
                        functions: self.functions.clone(),
                        data_section: self.data_section.clone(),
                        text_section: self.text_section.clone(),
                        data_count: self.data_count,
                    };
                    temp_compiler.compile_lines(&body);
                    *self = temp_compiler;
                }
                i += 1;
                continue;
            }

            panic!("Unsupported statement: {}", line);
        }
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <input.py>", args[0]);
        return;
    }

    let input = fs::read_to_string(&args[1]).expect("Failed to read input");
    let lines: Vec<String> = input.lines().map(|s| s.to_string()).collect();

    let mut compiler = Compiler::new();
    
    // First pass: collect functions
    let mut i = 0;
    while i < lines.len() {
        let line = lines[i].trim();
        if line.starts_with("def ") && line.ends_with("():") {
            let func_name = line[4..line.len()-3].trim().to_string();
            i += 1;
            let mut body = Vec::new();
            while i < lines.len() && (lines[i].starts_with("    ") || lines[i].is_empty()) {
                if !lines[i].trim().is_empty() {
                    body.push(lines[i][4..].to_string());
                }
                i += 1;
            }
            compiler.functions.insert(func_name, body);
        } else {
            i += 1;
        }
    }

    // Second pass: compile main code
    compiler.compile_lines(&lines);

    // Generate output
    let mut asm = compiler.data_section;
    asm.push("".to_string());
    asm.extend(compiler.text_section);
    asm.extend(vec![
        "    mov x0, #0",
        "    mov x8, #93",
        "    svc #0",
    ].iter().map(|s| s.to_string()).collect::<Vec<String>>());

    fs::write("out.s", asm.join("\n")).expect("Failed to write asm");
    Command::new("as").args(["out.s", "-o", "out.o"]).status().unwrap();
    Command::new("ld").args(["out.o", "-o", "a.out"]).status().unwrap();
}
