#!/usr/bin/env python3
import sys
import subprocess

if len(sys.argv) < 4 or sys.argv[2] != "-o":
    print("Usage: compiler <input.py> -o <output>")
    sys.exit(1)

input_file = sys.argv[1]
output_file = sys.argv[3]

# Read all non-comment, non-empty lines
with open(input_file) as f:
    lines = [l.strip() for l in f if l.strip() and not l.strip().startswith("#")]

if len(lines) < 2:
    print("❌ Need at least a variable assignment and a print statement.")
    sys.exit(1)

# --- Parse assignment ---
assign_line = lines[0]
if "=" not in assign_line:
    print("❌ First line must be a variable assignment.")
    sys.exit(1)

var_name, raw_value = [x.strip() for x in assign_line.split("=", 1)]

# --- Parse print ---
print_line = lines[1]
if not (print_line.startswith("print(") and print_line.endswith(")")):
    print("❌ Second line must be a print statement.")
    sys.exit(1)

printed_var = print_line[6:-1].strip()

if printed_var != var_name:
    print(f"❌ You tried to print an unknown variable: {printed_var}")
    sys.exit(1)

# --- Convert raw_value to string for .ascii ---
if raw_value.startswith('"') or raw_value.startswith("'"):
    value = raw_value.strip('"').strip("'") + "\\n"
elif raw_value.lower() in ["true", "false"]:
    value = raw_value.capitalize() + "\\n"
elif "." in raw_value:
    try:
        value = str(float(raw_value)) + "\\n"
    except ValueError:
        print("❌ Invalid float value.")
        sys.exit(1)
else:
    try:
        value = str(int(raw_value)) + "\\n"
    except ValueError:
        print("❌ Invalid integer value.")
        sys.exit(1)

# --- Assembly code ---
asm = f"""
    .data
str: .ascii "{value}"
len = . - str

    .text
    .global _start
_start:
    mov x0, #1              // stdout
    adr x1, str             // address of string
    mov x2, len             // length
    mov x8, #64             // syscall: write
    svc #0

    mov x0, #0              // exit code
    mov x8, #93             // syscall: exit
    svc #0
"""

# --- Write .s file ---
with open("out.s", "w") as f:
    f.write(asm)

# --- Compile & link ---
subprocess.run(["as", "-o", "out.o", "out.s"], check=True)
subprocess.run(["ld", "out.o", "-o", output_file], check=True)

print(f"✅ Compiled to {output_file}")
